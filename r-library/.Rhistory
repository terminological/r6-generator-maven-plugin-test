?testRapi::FeatureTest
devtools::load_all()
?testRapi::FeatureTest
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
here::i_am("vignettes/R6-generator-maven-config.Rmd")
source(here::here("vignettes/codeSnip.R"))
codeSnip(type="xml",filename=here::here("../pom.xml"))
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE, error = TRUE)
library(tidyverse)
here::i_am("vignettes/R6-generator-features.Rmd")
source(here::here("vignettes/codeSnip.R"))
codeSnip("java",
filename=here::here("../src/main/java/uk/co/terminological/rjava/test/FeatureTest.java"),"START_SNIP_1","END_SNIP_1") #,35,51)
# not run
# remove installed versions
try(detach("package:testRapi", unload = TRUE),silent = TRUE)
remove.packages("testRapi")
rm(list = ls())
# locally compiled
devtools::install("~/Git/r6-generator-maven-plugin-test/r-library/", upgrade = "never")
# pushed to github
# devtools::install_github("terminological/r6-generator-maven-plugin-test", subdir = "r-library", upgrade = "never")
# submitted to CRAN
# install.packages("testRapi")
source(here::here("vignettes/codeSnip.R"))
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$debug("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
debug(feat1$finalize)
feat1$finalize()
n
rm(feat1)
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$finalize()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
debug(feat1$finalize)
feat1$finalize()
.jcall(self$.jobj, returnSig = "V", method = "close")
self$.api$printMessages()
self$.api$printMessages()
self$.api$printMessages()
self$.api$printMessages()
.jcall(self$.jobj, returnSig = "V", method = "close")
self$.api$printMessages()
self$.api$printMessages()
self$.jobj = .jnull("uk/co/terminological/rjava/test/FeatureTest")
self$.jobj = NULL
.jgc(R.gc = FALSE)
q
rm(feat1)
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
rm(feat1)
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$finalize()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$.jobj$close()
feat1$finalize()
rm(feat1)
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
try({feat1$.jobj$close()})
feat1$.api$.log$debug("Test")
feat1$.api$.log$info("Test")
feat1$.api$printMessages()
try({feat1$finalize()})
feat1$doHelloWorld()
try({feat1$finalize()})
feat1$doHelloWorld()
try({feat1$finalize()},silent = TRUE)
feat1$doHelloWorld()
try({feat1$finalize()},silent = TRUE)
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE, error = TRUE)
library(tidyverse)
here::i_am("vignettes/R6-generator-features.Rmd")
source(here::here("vignettes/codeSnip.R"))
# locally compiled
devtools::install("~/Git/r6-generator-maven-plugin-test/r-library/", upgrade = "never")
# pushed to github
# devtools::install_github("terminological/r6-generator-maven-plugin-test", subdir = "r-library", upgrade = "never")
# submitted to CRAN
# install.packages("testRapi")
source(here::here("vignettes/codeSnip.R"))
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$debug("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$.api$.log$info("Test")
feat1$.api$printMessages()
feat1$doHelloWorld()
feat1$finalize()
debug(feat1$finalize)
feat1$finalize()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$debug("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object"
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$.api$.log$info("Test")
feat1$.api$printMessages()
feat1$.api$printMessages()
feat1$doHelloWorld()
feat1$.api$printMessages()
feat1$.api$.log$info("Test")
feat1$.api$printMessages()
feat1$finalize()
feat1$doHelloWorld()
debug(feat1$finalize)
feat1$finalize()
feat1$doHelloWorld()
try({feat1$.jobj$close()})
feat1$doHelloWorld()
feat1$.api$printMessages()
feat1$.api$.log$warn("test")
feat1$.api$printMessages()
feat1$doHelloWorld()
feat1$doHelloWorld
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE, error = TRUE)
library(tidyverse)
here::i_am("vignettes/R6-generator-features.Rmd")
source(here::here("vignettes/codeSnip.R"))
# locally compiled
devtools::install("~/Git/r6-generator-maven-plugin-test/r-library/", upgrade = "never")
# pushed to github
# devtools::install_github("terminological/r6-generator-maven-plugin-test", subdir = "r-library", upgrade = "never")
# submitted to CRAN
# install.packages("testRapi")
source(here::here("vignettes/codeSnip.R"))
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$debug("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$errorThrower()
feat1$doHelloWorld()
tryCatch({
feat1$errorThrower()
}, finally = feat1$doHelloWorld())
feat1$doHelloWorld()
tryCatch({
feat1$errorThrower()
}, finally = feat1$doHelloWorld())
feat1$doHelloWorld()
tryCatch({
feat1$errorThrower()
}, finally = feat1$.api$printMessages())
?tryCatch
tryCatch({
feat1$errorThrower()
}, error = function(e) {NULL}, finally = feat1$.api$printMessages())
tryCatch({
feat1$errorThrower()
}, error = function(e) {invisible(NULL)}, finally = feat1$.api$printMessages())
tryCatch({
feat1$errorThrower()
},
error = function(e) {invisible(NULL)},
finally = feat1$.api$printMessages())
tryCatch({
feat1$errorThrower()
},
#error = function(e) {invisible(NULL)},
finally = feat1$.api$printMessages())
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE, error = TRUE)
library(tidyverse)
here::i_am("vignettes/R6-generator-features.Rmd")
source(here::here("vignettes/codeSnip.R"))
# locally compiled
devtools::install("~/Git/r6-generator-maven-plugin-test/r-library/", upgrade = "never")
# pushed to github
# devtools::install_github("terminological/r6-generator-maven-plugin-test", subdir = "r-library", upgrade = "never")
# submitted to CRAN
# install.packages("testRapi")
source(here::here("vignettes/codeSnip.R"))
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$debug("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$errorThrower()
feat1$finalize()
feat1$doHelloWorld()
tryCatch({
feat1$errorThrower()
},
error = function(e) {invisible(NULL)},
finally = feat1$.api$printMessages())
feat1$finalize()
feat1$finalize
feat1$finalize()
feat1$finalize()
feat1$finalize()
feat1$finalize()
feat1$doHelloWorld()
debug(feat1$finalize)
feat1$finalize()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$debug("prove the logger is working and outputting debug statements...")
J$printMessages()
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
tryCatch({
feat1$errorThrower()
},
error = function(e) {invisible(NULL)},
finally = feat1$.api$printMessages())
feat1$doHelloWorld()
feat1$errorThrower()
feat1$.api$printMessages())
feat1$.api$printMessages()
feat1$finalize
feat1$finalize()
feat1$doHelloWorld()
feat1$finalize()
feat1$finalize
feat1$doHelloWorld()
tryCatch({
feat1$errorThrower()
},
error = function(e) {invisible(NULL)},
finally = feat1$.api$printMessages())
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {invisible(NULL)},
finally = feat1$.api$printMessages())
feat1$finalize()
debug(feat1$finalize)
feat1$finalize()
feat1$finalize()
n
feat1$finalize()
feat1$errorThrower()
feat1$errorThrower()
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {invisible(NULL)},
finally = print("finally"))
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {print("error")},
finally = print("finally"))
feat1$finalize()
devtools::reload()
devtools::reload()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$debug("prove the logger is working and outputting debug statements...")
J$printMessages()
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$errorThrower()
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {print("error")},
finally = print("finally"))
feat1$finalize()
feat1$finalize
devtools::reload()
J = testRapi::JavaApi$get(logLevel = "WARN")
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$finalize
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$errorThrower()
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {print("error")},
finally = print("finally"))
feat1$doHelloWorld()
feat1$finalize
feat1$finalize()
debug(feat1$finalize)
feat1$finalize()
tmp = .jcall(self$.jobj, returnSig = "V", method = "close")
tmp
feat1$finalize()
class(tmp)
?jcall
?.jcall
devtools::load_all()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$errorThrower()
feat1$errorThrower()
feat1$finalize
feat1$finalize()
feat1$doHelloWorld()
rm(feat1)
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
rm(feat1)
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
feat1$errorThrower()
feat1$.jobj
.jcheck()
feat1$errorThrower()
.jcheck()
devtools::load()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$errorThrower()
.jcheck()
feat1$errorThrower
feat1$doHelloWorld()
feat1$errorThrower()
feat1$doHelloWorld()
feat1$errorThrower
devtools::load_all()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$errorThrower()
feat1$doHelloWorld()
feat1$finalize()
feat1$finalize
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$finalize
feat1$finalize()
e$getMessage()
self$.api$printMessages()
self$.api$.log$warn(e$getMessage())
self$.api$printMessages()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
.jcheck()
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {print("error")},
finally = print("finally"))
feat1$finalize
feat1$finalize()
feat1$doHelloWorld()
feat1$doHelloWorld()
feat1$doHelloWorld()
feat1$doHelloWorld()
feat1$doHelloWorld()
feat1$doHelloWorld()
feat1$doHelloWorld()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
J$printMessages()
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1$errorThrower()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
.jcall
.jcheck
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {print("error")},
finally = print("finally"))
feat1$errorThrower()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
print(feat1$errorThrower())
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {print("error")},
finally = print("finally"))
feat1$errorThrower
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
.jcheck()
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower()
feat1$errorThrower
debug(feat1$errorThrower)
feat1$errorThrower()
?.jnew
devtools::load_all()
J = testRapi::JavaApi$get(logLevel = "WARN")
J$changeLogLevel("DEBUG")
J$.log$warn("prove the logger is working and outputting debug statements...")
J$printMessages()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1$doHelloWorld()
feat1$errorThrower
feat1$errorThrower()
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {print("error")},
finally = print("finally"))
feat1$finalize
feat1$finalize()
rm(feat1)
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
feat1 = NULL
gc()
feat1 = J$FeatureTest$new(logMessage = "Hello world. Creating a new object")
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {
print("error")
browser()
},
finally = print("finally"))
tryCatch({
x= feat1$errorThrower()
},
error = function(e) {
browser()
print("error")
},
finally = print("finally"))
e$message
e$jobj$printStackTrace()
e$jobj$printStackTrace()
class(e)
devtools::install_local(force = TRUE)
devtools::check()
?here::set_here
?here::i_am
here::i_am
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
pkgdown::build_site()

% Generated by r6-generator-maven-plugin: do not edit by hand

\name{FeatureTest}

\alias{FeatureTest}

\title{FeatureTest}

\arguments{
	\if{html}{\out{<div class="arguments">}}
	\item{logMessage}{logMessage - a message which will be logged - (java expects a String)}
	\if{html}{\out{</div>}}
}


\description{
A test of the R6 generator templating

Version: 0.02

Generated: 2022-05-03T11:15:31.686
}

\details{
	

The feature test should allow mathjax in javadoc

$$e = mc^2$$


this is a details comment
}

\examples{\dontrun{
J = testRapi::JavaApi$get();
instance = J$FeatureTest$new(logMessage)

## -----------------------------------
## Method `FeatureTest$doHelloWorld`
## -----------------------------------
minExample = J$FeatureTest$new('Hello, R World!')
minExample$doHelloWorld()

## -----------------------------------
## Method `FeatureTest$doSum`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$doSum2`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$demoStatic`
## -----------------------------------
J$FeatureTest$demoStatic('Ola, el mundo')

## -----------------------------------
## Method `FeatureTest$getMessage`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$fluentSetMessage`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$factoryMethod`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$objectAsParameter`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$doSomethingWithDataFrame`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$generateDataFrame`
## -----------------------------------

## -----------------------------------
## Method `FeatureTest$diamonds`
## -----------------------------------
J$FeatureTest$diamonds()

}}

\keyword{java api}

\section{Methods}{
	\subsection{Constructors}{
		\itemize{
			\item \href{#method-new}{\code{J$FeatureTest$new(logMessage)}}
		}
	}
	\subsection{Static methods}{
		\itemize{
			\item \href{#method-demoStatic}{\code{J$FeatureTest$demoStatic(message)}}
			\item \href{#method-diamonds}{\code{J$FeatureTest$diamonds()}}
		}
	}
	\subsection{Instance methods}{
		\itemize{
			\item \href{#method-doHelloWorld}{\code{instance$doHelloWorld()}}
			\item \href{#method-doSum}{\code{instance$doSum(a, b)}}
			\item \href{#method-doSum2}{\code{instance$doSum2(a, b)}}
			\item \href{#method-getMessage}{\code{instance$getMessage()}}
			\item \href{#method-fluentSetMessage}{\code{instance$fluentSetMessage(message)}}
			\item \href{#method-factoryMethod}{\code{instance$factoryMethod(a, b)}}
			\item \href{#method-objectAsParameter}{\code{instance$objectAsParameter(otherObj)}}
			\item \href{#method-doSomethingWithDataFrame}{\code{instance$doSomethingWithDataFrame(dataframe)}}
			\item \href{#method-generateDataFrame}{\code{instance$generateDataFrame()}}
			\item \code{instance$clone()}
			\item \code{instance$print()}
		}
	}

	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-new"></a>}}
	
	\subsection{Method \code{new()}}{
		A maximum of one constructor of any signature can be used. <br>

If different constructors are needed then they may be used but not 
included in the R Api (i.e. not annotated with @RMethod.) <br>

Static factory methods can be used instead.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FeatureTest$new(logMessage)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{logMessage - a message which will be logged}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 FeatureTest object: 
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
  
			minExample = J$FeatureTest$new('Hello from Java constructor!')
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-doHelloWorld"></a>}}
	
	\subsection{Method \code{doHelloWorld()}}{
		Description of a hello world function
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$doHelloWorld()
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: this java method returns a String
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
minExample = J$FeatureTest$new('Hello, R World!')
minExample$doHelloWorld()
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-doSum"></a>}}
	
	\subsection{Method \code{doSum()}}{
		The doSum function description = it adds two numerics
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$doSum(a, b)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{a the A parameter, can be NA}{ - (java expects a RNumeric)}
				\item{b the B parameter}{ - (java expects a RNumeric)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RNumeric: A+B of course, NAs in inputs are converted to null in Java. This catches the resulting NPE in java idiom and returns an explicit NA. 
This only matters if you care about the difference between NA_real_ and NaN in R.
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-doSum2"></a>}}
	
	\subsection{Method \code{doSum2()}}{
		Do sum 2 uses native ints rather than RNumerics
It should throw an error if given something that cannot be coerced to an integer. 
This also demonstrated the use of the `@RDefault` annotation
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$doSum2(a, b)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{a the A parameter}{ - (java expects a int)}
				\item{b the B parameter - (defaulting to "10")}{ - (java expects a int)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			int: A+B of course
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-demoStatic"></a>}}
	
	\subsection{Method \code{demoStatic()}}{
		Static methods are also supported. These are accessed through the
root of the R api.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FeatureTest$demoStatic(message)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message a message}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			void: 
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
J$FeatureTest$demoStatic('Ola, el mundo')
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-getMessage"></a>}}
	
	\subsection{Method \code{getMessage()}}{
		message desciption
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$getMessage()
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: The message (previously set by the constructor)
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-fluentSetMessage"></a>}}
	
	\subsection{Method \code{fluentSetMessage()}}{
		A fluent method which updates the message in this object, returning the
same object. This is differentiated from factory methods which produce a new
instance of the same class by checking to see if the returned Java object is equal
to the calling Java object.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$fluentSetMessage(message)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message the message is a string - (defaulting to "\"hello\nworld\"")}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 FeatureTest object: this should return exactly the same R6 object.
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-factoryMethod"></a>}}
	
	\subsection{Method \code{factoryMethod()}}{
		A factory or builder method which constructs an object of another class from some parameters
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$factoryMethod(a, b)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{a the first parameter}{ - (java expects a RCharacter)}
				\item{b the second parameter - (defaulting to "as.character(Sys.Date())")}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 MoreFeatureTest object: A MoreFeatureTest R6 reference
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-objectAsParameter"></a>}}
	
	\subsection{Method \code{objectAsParameter()}}{
		no description
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$objectAsParameter(otherObj)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{otherObj}{ - (java expects a MoreFeatureTest)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			String: 
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-doSomethingWithDataFrame"></a>}}
	
	\subsection{Method \code{doSomethingWithDataFrame()}}{
		Consumes a data frame and logs its length
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$doSomethingWithDataFrame(dataframe)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{dataframe a dataframe}{ - (java expects a RDataframe)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			void: 
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-generateDataFrame"></a>}}
	
	\subsection{Method \code{generateDataFrame()}}{
		Creates a basic dataframe and returns it
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
instance = J$FeatureTest$new(...);
instance$generateDataFrame()
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RDataframe: a daatframe
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-diamonds"></a>}}
	
	\subsection{Method \code{diamonds()}}{
		A copy of the ggplot2::diamonds dataframe serialised into java, using
RObject.writeRDS, saved within the jar file of the package, and exposed here
using RObject.readRDS.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FeatureTest$diamonds()
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RDataframe: the ggplot2::diamonds dataframe
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
J$FeatureTest$diamonds()
			}
			\if{html}{\out{</div>}}
		}
	}
}